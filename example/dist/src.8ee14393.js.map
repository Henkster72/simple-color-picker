{"version":3,"sources":["../src/ColorPicker.ts","../src/types.ts","../src/utils.ts","../src/color.ts","../node_modules/style-inject/dist/style-inject.es.js","index.js"],"names":["_isChoosing","isNumber","num","isNaN","clamp","value","min","max","Math","getMousePosition","e","type","indexOf","touch","touches","x","clientX","y","clientY","pad2","c","length","Color","color","this","r","g","b","a","h","s","v","fromHex","_hexNumber","_hexString","toString","substr","toUpperCase","hexStringToNumber","_rgba","d","_hsva","_updateBrightness","fromHsv","i","floor","f","p","q","t","mod","round","join","_brightness","_isDark","_isLight","parseInt","replace","ColorPicker","options","sbOffset","_this","$saturation","getBoundingClientRect","_moveSelectorTo","left","top","_updateColorFromPosition","_window","addEventListener","_onSaturationMouseUp","_onSaturationMouseMove","preventDefault","removeEventListener","hOffset","$hue","_moveHueTo","_updateHueFromPosition","_onHueMouseUp","_onHueMouseMove","window","_document","document","$el","createElement","className","innerHTML","querySelector","$sbSelector","$hSelector","_onSaturationMouseDown","_onHueMouseDown","el","appendTo","background","setBackgroundColor","widthUnits","_widthUnits","heightUnits","_heightUnits","setSize","width","height","setColor","appendChild","remove","_callbacks","parentNode","removeChild","_inputIsNumber","hsv","hue","_saturationWidth","_hueHeight","_updateHue","style","_maxHue","backgroundColor","padding","hexString","setNoBackground","onChange","callback","push","getHexString","getColor","getHexNumber","hex","getRGB","rgb","getHSV","isDark","isLight","position","transform","_updateColor","_huePosition","hsvColor","hueColor","borderColor","_triggerChange","forEach","_this2","css","ref","insertAt","head","getElementsByTagName","firstChild","insertBefore","styleSheet","cssText","createTextNode","colorPicker","body","hexStringColor"],"mappings":"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","file":"src.8ee14393.js","sourceRoot":"../src","sourcesContent":["import { Color, RGBAColor, HSVAColor } from './color'\nimport { isNumber, isString } from './types'\nimport { clamp, Position, getMousePosition } from './utils'\n\ntype ColorPickerOptions = {\n  window?: Window\n  el?: HTMLElement | string\n  background?: string | number\n  widthUnits?: string\n  heightUnits?: string\n  width?: number\n  height?: number\n  color?: string | number\n}\n\nexport class ColorPicker {\n  private _window: Window\n  private _document: Document\n  private _widthUnits: string = 'px'\n  private _heightUnits: string = 'px'\n  private _huePosition: number = 0\n  private _hueHeight: number = 0\n  private _maxHue: number = 0\n  public _inputIsNumber: boolean = false\n  private _saturationWidth: number = 0\n  private _isChoosing: boolean = false\n  private _callbacks: Function[] = []\n\n  public width: number = 0\n  public height: number = 0\n  public hue: number = 0\n  public position: Position = { x: 0, y: 0 }\n  public color: Color = new Color(0)\n  public backgroundColor: Color = new Color(0)\n  public hueColor: Color = new Color(0)\n\n  public $el: HTMLElement\n  public $saturation: HTMLElement\n  public $hue: HTMLElement\n  public $sbSelector: HTMLElement\n  public $hSelector: HTMLElement\n\n  constructor(options: ColorPickerOptions = {}) {\n    // Register window and document references in case this is instantiated inside of an iframe\n    this._window = options.window || window\n    this._document = this._window.document\n\n    // Create DOM\n    this.$el = this._document.createElement('div')\n    this.$el.className = 'Scp'\n    this.$el.innerHTML = `\n      <div class=\"Scp-saturation\">\n        <div class=\"Scp-brightness\"></div>\n        <div class=\"Scp-sbSelector\"></div>\n      </div>\n      <div class=\"Scp-hue\">\n        <div class=\"Scp-hSelector\"></div>\n      </div>\n    `\n\n    // DOM accessors\n    this.$saturation = this.$el.querySelector('.Scp-saturation')\n    this.$hue = this.$el.querySelector('.Scp-hue')\n    this.$sbSelector = this.$el.querySelector('.Scp-sbSelector')\n    this.$hSelector = this.$el.querySelector('.Scp-hSelector')\n\n    // Event listeners\n    this.$saturation.addEventListener('mousedown', this._onSaturationMouseDown)\n    this.$saturation.addEventListener('touchstart', this._onSaturationMouseDown)\n    this.$hue.addEventListener('mousedown', this._onHueMouseDown)\n    this.$hue.addEventListener('touchstart', this._onHueMouseDown)\n\n    // Some styling and DOMing from options\n    if (options.el) {\n      this.appendTo(options.el)\n    }\n\n    if (options.background) {\n      this.setBackgroundColor(options.background)\n    }\n\n    if (options.widthUnits) {\n      this._widthUnits = options.widthUnits\n    }\n\n    if (options.heightUnits) {\n      this._heightUnits = options.heightUnits\n    }\n\n    this.setSize(options.width || 175, options.height || 150)\n    this.setColor(options.color)\n  }\n\n  /**\n   * Add the ColorPicker instance to a DOM element.\n   * @param  {HTMLElement} el\n   * @return {ColorPicker} Returns itself for chaining purpose\n   */\n  public appendTo(el: HTMLElement | string): ColorPicker {\n    if (isString(el)) {\n      document.querySelector(el as string).appendChild(this.$el)\n    } else {\n      ;(el as HTMLElement).appendChild(this.$el)\n    }\n    return this\n  }\n\n  /**\n   * Removes picker from its parent and kill all listeners.\n   * Call this method for proper destroy.\n   */\n  public remove() {\n    this._callbacks = []\n\n    this._onSaturationMouseUp()\n    this._onHueMouseUp()\n\n    this.$saturation.removeEventListener(\n      'mousedown',\n      this._onSaturationMouseDown\n    )\n    this.$saturation.removeEventListener(\n      'touchstart',\n      this._onSaturationMouseDown\n    )\n    this.$hue.removeEventListener('mousedown', this._onHueMouseDown)\n    this.$hue.removeEventListener('touchstart', this._onHueMouseDown)\n\n    // this.off()\n\n    if (this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el)\n    }\n  }\n\n  /**\n   * Manually set the current color of the picker. This is the method\n   * used on instantiation to convert `color` option to actual color for\n   * the picker. Param can be a hexadecimal number or an hex String.\n   * @param {String|Number} color hex color desired\n   * @return {ColorPicker} Returns itself for chaining purpose\n   */\n  public setColor(color: string | number): ColorPicker {\n    this._inputIsNumber = isNumber(color)\n    this.color.fromHex(color)\n\n    const { h, s, v } = this.color.hsv\n\n    if (!isNaN(h)) {\n      this.hue = h\n    }\n\n    this._moveSelectorTo(this._saturationWidth * s, (1 - v) * this._hueHeight)\n    this._moveHueTo((1 - this.hue) * this._hueHeight)\n\n    this._updateHue()\n    return this\n  }\n\n  /**\n   * Set size of the color picker for a given width and height. Note that\n   * a padding of 5px will be added if you chose to use the background option\n   * of the constructor.\n   * @param {Number} width\n   * @param {Number} height\n   * @return {ColorPicker} Returns itself for chaining purpose\n   */\n  public setSize(width: number, height: number): ColorPicker {\n    this.width = width\n    this.height = height\n    this.$el.style.width = this.width + this._widthUnits\n    this.$el.style.height = this.height + this._heightUnits\n\n    this._saturationWidth = this.width - 25\n    this.$saturation.style.width = this._saturationWidth + 'px'\n\n    this._hueHeight = this.height\n    this._maxHue = this._hueHeight - 2\n\n    return this\n  }\n\n  /**\n   * Set the background color of the picker. It also adds a 5px padding\n   * for design purpose.\n   * @param {String|Number} color hex color desired for background\n   * @return {ColorPicker} Returns itself for chaining purpose\n   */\n  public setBackgroundColor(color: string | number): ColorPicker {\n    this.backgroundColor.fromHex(color)\n    this.$el.style.padding = '5px'\n    this.$el.style.background = this.backgroundColor.hexString\n    return this\n  }\n\n  /**\n   * Removes background of the picker if previously set. It's no use\n   * calling this method if you didn't set the background option on start\n   * or if you didn't call setBackgroundColor previously.\n   */\n  public setNoBackground(): ColorPicker {\n    this.$el.style.padding = '0px'\n    this.$el.style.background = 'none'\n    return this\n  }\n\n  /**\n   * Registers callback to the update event of the picker.\n   * picker inherits from [component/emitter](https://github.com/component/emitter)\n   * so you could do the same thing by calling `colorPicker.on('update');`\n   * @param  {Function} callback\n   * @return {ColorPicker} Returns itself for chaining purpose\n   */\n  public onChange(callback: Function): ColorPicker {\n    if (this._callbacks.indexOf(callback) < 0) {\n      this._callbacks.push(callback)\n      callback(this.getHexString())\n    }\n    return this\n  }\n\n  /**\n   * Is true when mouse is down and user is currently choosing a color.\n   */\n  public get isChoosing(): boolean {\n    return this._isChoosing\n  }\n\n  /* =============================================================================\n    Color getters\n  ============================================================================= */\n  /**\n   * Main color getter, will return a formatted color string depending on input\n   * or a number depending on the last setColor call.\n   * @return {Number|String}\n   */\n  public getColor(): number | string {\n    if (this._inputIsNumber) {\n      return this.getHexNumber()\n    }\n    return this.getHexString()\n  }\n\n  /**\n   * Returns color as css hex string (ex: '#FF0000').\n   * @return {String}\n   */\n  public getHexString(): string {\n    return this.color.hexString.toUpperCase()\n  }\n\n  /**\n   * Returns color as number (ex: 0xFF0000).\n   * @return {Number}\n   */\n  public getHexNumber(): number {\n    return this.color.hex\n  }\n\n  /**\n   * Returns color as {r: 1, g: 0, b: 0} object.\n   * @return {Object}\n   */\n  public getRGB(): RGBAColor {\n    return this.color.rgb\n  }\n\n  /**\n   * Returns color as {h: 100, s: 1, v: 1} object.\n   * @return {Object}\n   */\n  public getHSV(): HSVAColor {\n    return this.color.hsv\n  }\n\n  /**\n   * Returns true if color is perceived as dark\n   * @return {Boolean}\n   */\n  public isDark(): boolean {\n    return this.color.isDark\n  }\n\n  /**\n   * Returns true if color is perceived as light\n   * @return {Boolean}\n   */\n  public isLight(): boolean {\n    return this.color.isLight\n  }\n\n  /* =============================================================================\n    Private methods\n  ============================================================================= */\n  private _moveSelectorTo(x: number, y: number): void {\n    this.position.x = clamp(x, 0, this._saturationWidth)\n    this.position.y = clamp(y, 0, this._hueHeight)\n\n    this.$sbSelector.style.transform = `translate(${this.position.x}px, ${this.position.y}px)`\n  }\n\n  private _updateColorFromPosition(): void {\n    this.color.fromHsv({\n      h: this.hue,\n      s: this.position.x / this._saturationWidth,\n      v: 1 - this.position.y / this._hueHeight\n    })\n    this._updateColor()\n  }\n\n  private _moveHueTo(y: number): void {\n    this._huePosition = clamp(y, 0, this._maxHue)\n    this.$hSelector.style.transform = `translateY(${this._huePosition}px)`\n  }\n\n  private _updateHueFromPosition(): void {\n    const hsvColor = this.getHSV()\n    this.hue = 1 - this._huePosition / this._maxHue\n    this.color.fromHsv({ h: this.hue, s: hsvColor.s, v: hsvColor.v })\n    this._updateHue()\n  }\n\n  private _updateHue(): void {\n    this.hueColor.fromHsv({ h: this.hue, s: 1, v: 1 })\n    this.$saturation.style.background = `linear-gradient(to right, #fff, ${this.hueColor.hexString})`\n    this._updateColor()\n  }\n\n  private _updateColor(): void {\n    this.$sbSelector.style.background = this.getHexString()\n    this.$sbSelector.style.borderColor = this.isDark() ? '#fff' : '#000'\n    this._triggerChange()\n  }\n\n  private _triggerChange(): void {\n    this._callbacks.forEach(callback => callback(this.getHexString()))\n  }\n\n  /* =============================================================================\n    Events handlers\n  ============================================================================= */\n  private _onSaturationMouseDown = (e: MouseEvent | TouchEvent): void => {\n    const sbOffset = this.$saturation.getBoundingClientRect()\n    const { x, y } = getMousePosition(e)\n    this._isChoosing = true\n    this._moveSelectorTo(x - sbOffset.left, y - sbOffset.top)\n    this._updateColorFromPosition()\n    this._window.addEventListener('mouseup', this._onSaturationMouseUp)\n    this._window.addEventListener('touchend', this._onSaturationMouseUp)\n    this._window.addEventListener('mousemove', this._onSaturationMouseMove)\n    this._window.addEventListener('touchmove', this._onSaturationMouseMove)\n    e.preventDefault()\n  }\n\n  private _onSaturationMouseMove = (e: MouseEvent | TouchEvent): void => {\n    const sbOffset = this.$saturation.getBoundingClientRect()\n    const { x, y } = getMousePosition(e)\n    this._moveSelectorTo(x - sbOffset.left, y - sbOffset.top)\n    this._updateColorFromPosition()\n  }\n\n  private _onSaturationMouseUp = () => {\n    this._isChoosing = false\n    this._window.removeEventListener('mouseup', this._onSaturationMouseUp)\n    this._window.removeEventListener('touchend', this._onSaturationMouseUp)\n    this._window.removeEventListener('mousemove', this._onSaturationMouseMove)\n    this._window.removeEventListener('touchmove', this._onSaturationMouseMove)\n  }\n\n  private _onHueMouseDown = (e: MouseEvent | TouchEvent): void => {\n    const hOffset = this.$hue.getBoundingClientRect()\n    const { y } = getMousePosition(e)\n    this._isChoosing = true\n    this._moveHueTo(y - hOffset.top)\n    this._updateHueFromPosition()\n    this._window.addEventListener('mouseup', this._onHueMouseUp)\n    this._window.addEventListener('touchend', this._onHueMouseUp)\n    this._window.addEventListener('mousemove', this._onHueMouseMove)\n    this._window.addEventListener('touchmove', this._onHueMouseMove)\n    e.preventDefault()\n  }\n\n  private _onHueMouseMove = e => {\n    const hOffset = this.$hue.getBoundingClientRect()\n    const { y } = getMousePosition(e)\n    this._moveHueTo(y - hOffset.top)\n    this._updateHueFromPosition()\n  }\n\n  private _onHueMouseUp = () => {\n    this._isChoosing = false\n    this._window.removeEventListener('mouseup', this._onHueMouseUp)\n    this._window.removeEventListener('touchend', this._onHueMouseUp)\n    this._window.removeEventListener('mousemove', this._onHueMouseMove)\n    this._window.removeEventListener('touchmove', this._onHueMouseMove)\n  }\n}\n","export function isString(str: any): boolean {\n  return typeof str === 'string'\n}\n\nexport function isNumber(num: any): boolean {\n  return typeof num === 'number' && !isNaN(num)\n}\n","export function clamp(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max)\n}\n\nexport type Position = {\n  x: number\n  y: number\n}\n\nexport function getMousePosition(e: MouseEvent | TouchEvent): Position {\n  if (e.type.indexOf('touch') === 0) {\n    const touch = (e as TouchEvent).touches[0]\n    return { x: touch.clientX, y: touch.clientY }\n  }\n  const mouse = e as MouseEvent\n  return { x: mouse.clientX, y: mouse.clientY }\n}\n\nexport function pad2(c: string): string {\n  return c.length == 1 ? '0' + c : '' + c\n}","import { isNumber } from './types'\nimport { pad2 } from './utils'\n\n// Each member has a range of 0-1\\\nexport type RGBAColor = {\n  r: number\n  g: number\n  b: number\n  a?: number\n}\n\n// Each member has a range of 0-1\nexport type HSVAColor = {\n  h: number\n  s: number\n  v: number\n  a?: number\n}\n\nexport class Color {\n  private _rgba: RGBAColor = { r: 0, g: 0, b: 0, a: 1 }\n  private _hsva: HSVAColor = { h: 0, s: 0, v: 0, a: 1 }\n  private _hexNumber: number\n  private _brightness: number\n  private _hexString: string\n  private _isDark: boolean\n  private _isLight: boolean\n\n  constructor(color: number | string) {\n    this.fromHex(color)\n  }\n\n  public fromHex(color: number | string): void {\n    if (!color) color = 0\n\n    if (isNumber(color)) {\n      this._hexNumber = color as number\n      this._hexString = numberToHexString(this._hexNumber)\n    } else {\n      this._hexString = (color as string).toUpperCase()\n      this._hexNumber = hexStringToNumber(this._hexString)\n    }\n    const { r, g, b } = hexNumberToRgb(this._hexNumber)\n\n    this._rgba.r = r\n    this._rgba.g = g\n    this._rgba.b = b\n\n    const { h, s, v } = rgbToHsv(this._rgba)\n\n    this._hsva.h = h\n    this._hsva.s = s\n    this._hsva.v = v\n\n    this._updateBrightness()\n  }\n\n  public fromHsv(color: HSVAColor): void {\n    const { h, s, v } = color\n\n    this._hsva.h = h\n    this._hsva.s = s\n    this._hsva.v = v\n\n    const { r, g, b } = hsvToRgb(this._hsva)\n\n    this._rgba.r = r\n    this._rgba.g = g\n    this._rgba.b = b\n\n    this._hexString = rgbToHex(this._rgba)\n    this._hexNumber = hexStringToNumber(this._hexString)\n\n    this._updateBrightness()\n  }\n\n  private _updateBrightness(): void {\n    const { r, g, b } = this._rgba\n    this._brightness = (r * 299 + g * 587 + b * 114) / 1000\n    this._isDark = this._brightness < 0.5\n    this._isLight = !this._isDark\n  }\n\n  get rgb(): RGBAColor {\n    return this._rgba\n  }\n\n  get hsv(): HSVAColor {\n    return this._hsva\n  }\n\n  get hex(): number {\n    return this._hexNumber\n  }\n\n  get hexString(): string {\n    return this._hexString\n  }\n\n  get brightness(): number {\n    return this._brightness\n  }\n\n  get isDark(): boolean {\n    return this._isDark\n  }\n\n  get isLight(): boolean {\n    return this._isLight\n  }\n}\n\nexport function hexNumberToRgb(color: number): RGBAColor {\n  const r = ((color >> 16) & 255) / 255\n  const g = ((color >> 8) & 255) / 255\n  const b = (color & 255) / 255\n  return { r, g, b }\n}\n\nexport function rgbToHex(color: RGBAColor): string {\n  const { r, g, b } = color\n  var hex = [\n    '#',\n    pad2(Math.round(r * 255).toString(16)),\n    pad2(Math.round(g * 255).toString(16)),\n    pad2(Math.round(b * 255).toString(16))\n  ]\n\n  return hex.join('').toUpperCase()\n}\n\nexport function numberToHexString(color: number): string {\n  return '#' + ('00000' + (color | 0).toString(16)).substr(-6).toUpperCase()\n}\n\nexport function hexStringToNumber(color: string): number {\n  return parseInt(color.replace('#', ''), 16)\n}\n\nexport function hsvToRgb(color: HSVAColor): RGBAColor {\n  let { h, s, v } = color\n  h *= 6\n\n  const i = Math.floor(h)\n  const f = h - i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n  const mod = i % 6\n  const r = [v, q, p, p, t, v][mod]\n  const g = [t, v, v, q, p, p][mod]\n  const b = [p, p, t, v, v, q][mod]\n\n  return { r, g, b }\n}\n\nexport function rgbToHsv(color: RGBAColor): HSVAColor {\n  const { r, g, b } = color\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  const d = max - min\n  const s = max === 0 ? 0 : d / max\n  const v = max\n\n  let h\n\n  if (max == min) {\n    h = 0\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n    }\n    h /= 6\n  }\n  return { h, s, v }\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import ColorPicker from '../../dist/simple-color-picker'\n\n/* --------------------------\n  ColorPicker\n*/\nvar colorPicker = new ColorPicker({\n\tel: document.body,\n\tcolor: '#123456',\n\tbackground: '#656565'\n  });\n  \n  colorPicker.onChange(hexStringColor => {\n\tdocument.body.style.background = hexStringColor;\n\tdocument.querySelector('h1 a').style.color = colorPicker.isDark() ? '#FFFFFF' : '#000000';\n  });\n  "]}